name: üöÄ Main CI/CD Pipeline (Password Auth)

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # CONTINUOUS INTEGRATION
  # ============================================================================
  ci-backend:
    name: üß™ Backend CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ci-backend
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Backend Tests
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml

      - name: Run Backend Linting
        run: |
          flake8 app/ --max-line-length=100
          black --check app/
          isort --check-only app/

      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  ci-frontend:
    name: üé® Frontend CI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: ci-frontend
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/frontend/panel/package-lock.json

      - name: Install Frontend dependencies
        working-directory: app/frontend/panel
        run: npm ci || npm install

      - name: Run Frontend Tests
        working-directory: app/frontend/panel
        run: |
          npm run test:unit

      - name: Run Frontend Linting
        working-directory: app/frontend/panel
        run: |
          npm run lint

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: security
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Python Security Scan
        continue-on-error: true
        run: |
          pip install bandit 'safety>=3.2,<4'
          bandit -r app/ -f json -o bandit-report.json --severity-level medium
          safety check --json --output safety-report.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Frontend Security Scan
        working-directory: app/frontend/panel
        continue-on-error: true
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json

      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Ensure Trivy SARIF exists
        if: always()
        run: test -f trivy-results.sarif || echo '{}' > trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.trivy.outcome == 'success'
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # DEPLOYMENT (Password Authentication)
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [ci-backend, ci-frontend, security]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.STAGING_HOST || 'localhost' }} >> ~/.ssh/known_hosts

      - name: Deploy to staging server
        run: |
          # Create deployment script
          cat > deploy-staging-temp.sh << 'EOF'
          #!/bin/bash
          set -e
          cd /opt/china-car-parts
          git pull origin staging
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Create database backup before migration
          echo "üì¶ Creating database backup before migration..."
          BACKUP_FILE="/opt/backups/staging_db_backup_$(date +%Y%m%d_%H%M%S).db"
          mkdir -p /opt/backups
          cp /opt/china-car-parts/data/china_car_parts.db "$BACKUP_FILE"
          echo "‚úÖ Database backup created: $BACKUP_FILE"
          
          # Run database migration
          alembic upgrade head
          systemctl restart china-car-parts-api
          systemctl restart china-car-parts-bot
          systemctl restart nginx
          echo "‚úÖ Staging deployment completed successfully!"
          EOF
          
          # Copy script to server using scp with password
          sshpass -p "${{ secrets.STAGING_SSH_PASSWORD }}" scp deploy-staging-temp.sh ${{ secrets.STAGING_USER || 'root' }}@${{ secrets.STAGING_HOST || 'localhost' }}:/tmp/
          
          # Execute script on server using ssh with password
          sshpass -p "${{ secrets.STAGING_SSH_PASSWORD }}" ssh ${{ secrets.STAGING_USER || 'root' }}@${{ secrets.STAGING_HOST || 'localhost' }} "chmod +x /tmp/deploy-staging-temp.sh && /tmp/deploy-staging-temp.sh"

      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Run Smoke Tests
        run: |
          # Run health check on the staging server itself
          sshpass -p "${{ secrets.STAGING_SSH_PASSWORD }}" ssh ${{ secrets.STAGING_USER || 'root' }}@${{ secrets.STAGING_HOST || 'localhost' }} "
            # Test API health
            curl -f http://localhost:8001/api/v1/health
            
            # Test frontend
            curl -f http://localhost:5173/ || echo 'Frontend check skipped (not critical)'
            
            echo '‚úÖ Smoke tests completed!'
          "

  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ci-backend, ci-frontend, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH client and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_HOST || '5.223.59.155' }} >> ~/.ssh/known_hosts

      - name: Execute Blue-Green Deployment
        run: |
          # Create blue-green deployment script
          cat > deploy-blue-green.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Check if blue-green directories exist, if not, run setup first
          if [ ! -d "/opt/china-car-parts-blue" ] || [ ! -d "/opt/china-car-parts-green" ]; then
            echo "‚ùå Blue-green directories not found. Please run setup_production_blue_green.sh first."
            echo "This script should be run ONCE on the production server before the first deployment."
            exit 1
          fi
          
          # Determine current and target environments
          CURRENT=$(nginx -T 2>/dev/null | grep -o 'upstream.*-api' | head -1 | cut -d'-' -f1)
          if [ "$CURRENT" = "blue" ]; then
            TARGET="green"
          else
            TARGET="blue"
          fi
          
          echo "üîÑ Deploying to $TARGET environment..."
          
          # Deploy to target environment
          cd /opt/china-car-parts-$TARGET
          git pull origin main
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Create database backup before migration
          echo "üì¶ Creating database backup before migration..."
          BACKUP_FILE="/opt/backups/production_db_backup_$(date +%Y%m%d_%H%M%S).db"
          mkdir -p /opt/backups
          if [ -f "/opt/china-car-parts-$TARGET/data/china_car_parts.db" ]; then
            cp /opt/china-car-parts-$TARGET/data/china_car_parts.db "$BACKUP_FILE"
            echo "‚úÖ Database backup created: $BACKUP_FILE"
          else
            echo "‚ö†Ô∏è No existing database found, will create new one"
          fi
          
          # Run database migration
          alembic upgrade head
          
          # Start services
          systemctl restart china-car-parts-api-$TARGET
          systemctl restart china-car-parts-bot-$TARGET
          
          # Health check with retry logic
          echo "‚è≥ Waiting for services to be ready..."
          for i in {1..30}; do
            if curl -f -s http://localhost:$([ "$TARGET" = "blue" ] && echo "8001" || echo "8002")/api/v1/health > /dev/null; then
              echo "‚úÖ Health check passed"
              break
            fi
            echo "‚è≥ Health check attempt $i/30..."
            sleep 2
          done
          
          # Final health check
          if ! curl -f -s http://localhost:$([ "$TARGET" = "blue" ] && echo "8001" || echo "8002")/api/v1/health > /dev/null; then
            echo "‚ùå Health check failed after 60 seconds"
            exit 1
          fi
          
          # Switch traffic
          sed -i "s/upstream $CURRENT-api/upstream $TARGET-api/g" /etc/nginx/sites-available/china-car-parts
          nginx -s reload
          
          echo "‚úÖ Production deployment to $TARGET completed successfully!"
          EOF
          
          # Copy and execute script using password authentication
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" scp deploy-blue-green.sh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }}:/tmp/
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }} "chmod +x /tmp/deploy-blue-green.sh && /tmp/deploy-blue-green.sh"

      - name: Production Health Check
        run: |
          # Run health check on the production server itself
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }} "
            # Test API health
            curl -f http://localhost:8001/api/v1/health || curl -f http://localhost:8002/api/v1/health
            
            # Test frontend
            curl -f http://localhost:5173/ || echo 'Frontend check skipped (not critical)'
            
            echo '‚úÖ Production health checks completed!'
          "

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commitSha = context.sha;
            const prodUrl = '${{ secrets.PROD_API_URL || 'https://5.223.59.155/api' }}';
            const frontendUrl = '${{ secrets.PROD_FRONTEND_ORIGIN || 'https://5.223.59.155' }}';
            
            console.log(`üöÄ Production Deployment Successful!
            
            **Commit:** \`${commitSha}\`
            **API:** ${prodUrl}
            **Frontend:** ${frontendUrl}
            
            Deployment completed at ${new Date().toISOString()}`);

  # ============================================================================
  # CLEANUP & NOTIFICATIONS
  # ============================================================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Generate Deployment Report
        run: |
          echo "## üöÄ Deployment Report" >> deployment-report.md
          echo "- **Commit:** ${{ github.sha }}" >> deployment-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Workflow:** ${{ github.workflow }}" >> deployment-report.md
          echo "- **Status:** ${{ job.status }}" >> deployment-report.md
          echo "- **Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-report.md

      - name: Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

name: 🚀 Main CI/CD Pipeline (Password Auth)

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback
      environment:
        description: 'Target environment (for rollback)'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # CONTINUOUS INTEGRATION
  # ============================================================================
  ci-backend:
    name: 🧪 Backend CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ci-backend
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Backend Tests
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml

      - name: Run Backend Linting
        run: |
          flake8 app/
          black --check app/
          isort --check-only app/

      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  ci-frontend:
    name: 🎨 Frontend CI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: ci-frontend
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/frontend/panel/package.json

      - name: Install Frontend dependencies
        working-directory: app/frontend/panel
        run: npm install

      - name: Run Frontend Tests
        working-directory: app/frontend/panel
        run: |
          npm run test:unit

      - name: Run Frontend Linting
        working-directory: app/frontend/panel
        run: |
          npm run lint

      - name: Build Frontend
        working-directory: app/frontend/panel
        run: |
          npm run build:panel

      - name: Upload Frontend Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-panel-dist
          path: app/frontend/panel/dist/
          retention-days: 7

  ci-customer-frontend:
    name: 🎨 Customer Frontend CI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: ci-customer-frontend
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/frontend/web/package.json

      - name: Install Customer Frontend dependencies
        working-directory: app/frontend/web
        run: npm install

      - name: Run Customer Frontend Linting
        working-directory: app/frontend/web
        run: |
          npm run lint || echo "Linting not configured yet"

      - name: Build Customer Frontend
        working-directory: app/frontend/web
        run: |
          npm run build

      - name: Upload Customer Frontend Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-customer-dist
          path: app/frontend/web/dist/
          retention-days: 7

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: security
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Python Security Scan
        continue-on-error: true
        run: |
          pip install bandit 'safety>=3.2,<4'
          bandit -r app/ -f json -o bandit-report.json --severity-level medium
          safety check --json --output safety-report.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Frontend Security Scan
        working-directory: app/frontend/panel
        continue-on-error: true
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json

      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Ensure Trivy SARIF exists
        if: always()
        run: test -f trivy-results.sarif || echo '{}' > trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.trivy.outcome == 'success'
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # DEPLOYMENT (Password Authentication)
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [ci-backend, ci-frontend, ci-customer-frontend, security]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.STAGING_HOST || 'localhost' }} >> ~/.ssh/known_hosts

      - name: Deploy to staging server
        run: |
          # Create enhanced deployment script
          cat > deploy-staging-temp.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting enhanced staging deployment..."
          
          # Navigate to project directory
          cd /opt/china-car-parts
          
          # Clean git state
          echo "🧹 Cleaning git state..."
          git reset --hard HEAD
          git clean -fd
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin staging
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install Python dependencies
          echo "📦 Installing Python dependencies..."
          pip install -r requirements.txt
          
          # Create database backup before migration
          echo "📦 Creating database backup before migration..."
          BACKUP_FILE="/opt/backups/staging_db_backup_$(date +%Y%m%d_%H%M%S).db"
          mkdir -p /opt/backups
          if [ -f "/opt/china-car-parts/data/china_car_parts.db" ]; then
            cp /opt/china-car-parts/data/china_car_parts.db "$BACKUP_FILE"
            echo "✅ Database backup created: $BACKUP_FILE"
          else
            echo "⚠️ No existing database found, will create new one"
          fi
          
          # Run database migration
          echo "🗄️ Running database migration..."
          alembic upgrade head
          
          # Build Admin Panel Frontend
          echo "🎨 Building Admin Panel..."
          cd app/frontend/panel
          npm install
          npm run build:panel
          
          # Build Customer Portal Frontend
          echo "🌐 Building Customer Portal..."
          cd ../web
          npm install
          npm run build
          
          # Go back to project root
          cd ../../..
          
          # Set proper file permissions
          echo "🔐 Setting file permissions..."
          chmod -R 755 app/frontend/panel/dist/
          chmod -R 755 app/frontend/web/dist/
          chown -R www-data:www-data app/frontend/panel/dist/ || true
          chown -R www-data:www-data app/frontend/web/dist/ || true
          
          # Copy updated Nginx configuration
          echo "🌐 Updating Nginx configuration..."
          cp deployment/configs/nginx-staging.conf /etc/nginx/sites-available/china-car-parts
          
          # Test Nginx configuration
          echo "🧪 Testing Nginx configuration..."
          nginx -t
          
          # Restart services
          echo "🔄 Restarting services..."
          systemctl restart china-car-parts-api
          systemctl restart china-car-parts-bot
          systemctl reload nginx
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to be ready..."
          sleep 5
          
          # Health check
          echo "🏥 Running health checks..."
          if curl -f -s http://localhost:8001/api/v1/health > /dev/null; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi
          
          echo "✅ Enhanced staging deployment completed successfully!"
          EOF
          
          # Copy script to server using scp with password
          sshpass -p "${{ secrets.STAGING_SSH_PASSWORD }}" scp deploy-staging-temp.sh ${{ secrets.STAGING_USER || 'root' }}@${{ secrets.STAGING_HOST || 'localhost' }}:/tmp/
          
          # Execute script on server using ssh with password
          sshpass -p "${{ secrets.STAGING_SSH_PASSWORD }}" ssh ${{ secrets.STAGING_USER || 'root' }}@${{ secrets.STAGING_HOST || 'localhost' }} "chmod +x /tmp/deploy-staging-temp.sh && /tmp/deploy-staging-temp.sh"

      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Run Smoke Tests
        run: |
          # Run health check on the staging server itself
          sshpass -p "${{ secrets.STAGING_SSH_PASSWORD }}" ssh ${{ secrets.STAGING_USER || 'root' }}@${{ secrets.STAGING_HOST || 'localhost' }} "
            # Test API health
            curl -f http://localhost:8001/api/v1/health
            
            # Test frontend
            curl -f http://localhost:5173/ || echo 'Frontend check skipped (not critical)'
            
            echo '✅ Smoke tests completed!'
          "

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ci-backend, ci-frontend, ci-customer-frontend, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH client and sshpass
        run: |
          # Disable man-db triggers to speed up installation
          echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_HOST || '5.223.59.155' }} >> ~/.ssh/known_hosts

      - name: Execute Blue-Green Deployment
        run: |
          # Create blue-green deployment script
          cat > deploy-blue-green.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Check if blue-green directories exist, if not, run setup first
          if [ ! -d "/opt/china-car-parts-blue" ] || [ ! -d "/opt/china-car-parts-green" ]; then
            echo "❌ Blue-green directories not found. Please run setup_production_blue_green.sh first."
            echo "This script should be run ONCE on the production server before the first deployment."
            exit 1
          fi
          
          # Determine current and target environments
          # Check which port is primary (not backup) in china_car_parts_api upstream
          CURRENT_PORT=$(nginx -T 2>/dev/null | grep -A 5 'upstream china_car_parts_api' | grep -v backup | grep -o '800[12]' | head -1)
          if [ "$CURRENT_PORT" = "8001" ]; then
            TARGET="green"
            TARGET_PORT="8002"
          else
            TARGET="blue"
            TARGET_PORT="8001"
          fi
          
          echo "🔄 Deploying to $TARGET environment..."
          
          # Deploy to target environment
          cd /opt/china-car-parts-$TARGET
          git reset --hard HEAD
          git clean -fd
          git pull origin main
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Create database backup before migration
          echo "📦 Creating database backup before migration..."
          BACKUP_FILE="/opt/backups/production_db_backup_$(date +%Y%m%d_%H%M%S).db"
          mkdir -p /opt/backups
          if [ -f "/opt/china-car-parts-$TARGET/data/china_car_parts.db" ]; then
            cp /opt/china-car-parts-$TARGET/data/china_car_parts.db "$BACKUP_FILE"
            echo "✅ Database backup created: $BACKUP_FILE"
          else
            echo "⚠️ No existing database found, will create new one"
          fi
          
          # Run database migration
          echo "🗄️ Running database migration..."
          alembic upgrade head
          
          # Build Admin Panel Frontend
          echo "🎨 Building Admin Panel..."
          cd app/frontend/panel
          npm install
          npm run build:panel
          
          # Build Customer Portal Frontend
          echo "🌐 Building Customer Portal..."
          cd ../web
          npm install
          npm run build
          
          # Go back to project root
          cd ../../..
          
          # Copy built frontend to main directory for Nginx
          echo "📁 Copying frontend builds to main directory..."
          echo "🔍 Checking Admin Panel build..."
          ls -la app/frontend/panel/dist/ || echo "❌ Admin Panel dist directory not found"
          echo "🔍 Checking Customer Portal build..."
          ls -la app/frontend/web/dist/ || echo "❌ Customer Portal dist directory not found"
          
          mkdir -p /opt/china-car-parts/app/frontend/panel/dist
          mkdir -p /opt/china-car-parts/app/frontend/web/dist
          
          echo "📋 Copying Admin Panel files..."
          cp -r app/frontend/panel/dist/* /opt/china-car-parts/app/frontend/panel/dist/ || echo "❌ Failed to copy Admin Panel files"
          echo "📋 Copying Customer Portal files..."
          cp -r app/frontend/web/dist/* /opt/china-car-parts/app/frontend/web/dist/ || echo "❌ Failed to copy Customer Portal files"
          
          echo "🔍 Verifying copied files..."
          ls -la /opt/china-car-parts/app/frontend/panel/dist/ || echo "❌ Admin Panel files not found in target"
          ls -la /opt/china-car-parts/app/frontend/web/dist/ || echo "❌ Customer Portal files not found in target"
          
          # Set proper file permissions
          echo "🔐 Setting file permissions..."
          chmod -R 755 /opt/china-car-parts/app/frontend/panel/dist/
          chmod -R 755 /opt/china-car-parts/app/frontend/web/dist/
          chown -R www-data:www-data /opt/china-car-parts/app/frontend/panel/dist/ || true
          chown -R www-data:www-data /opt/china-car-parts/app/frontend/web/dist/ || true
          
          # Copy updated Nginx configuration
          echo "🌐 Updating Nginx configuration..."
          cp deployment/configs/nginx-production.conf /etc/nginx/sites-available/china-car-parts
          
          # Test Nginx configuration
          echo "🧪 Testing Nginx configuration..."
          nginx -t
          
          # Start services
          echo "🔄 Starting services..."
          systemctl restart china-car-parts-api-$TARGET
          systemctl restart china-car-parts-bot-$TARGET
          
          # Health check with retry logic
          echo "⏳ Waiting for services to be ready..."
          for i in {1..30}; do
            if curl -f -s http://localhost:$TARGET_PORT/api/v1/health > /dev/null; then
              echo "✅ Health check passed"
              break
            fi
            echo "⏳ Health check attempt $i/30..."
            sleep 2
          done
          
          # Final health check
          if ! curl -f -s http://localhost:$TARGET_PORT/api/v1/health > /dev/null; then
            echo "❌ Health check failed after 60 seconds"
            exit 1
          fi
          
          # Switch traffic by updating the primary server in upstream
          # Backup the current config
          cp /etc/nginx/sites-available/china-car-parts /etc/nginx/sites-available/china-car-parts.backup
          
          # Switch primary and backup servers
          if [ "$TARGET_PORT" = "8001" ]; then
            # Make 8001 primary, 8002 backup
            sed -i '/upstream china_car_parts_api/,/}/ { s/server 127.0.0.1:8001.*/server 127.0.0.1:8001 weight=1 max_fails=3 fail_timeout=30s;/; s/server 127.0.0.1:8002.*/server 127.0.0.1:8002 weight=1 max_fails=3 fail_timeout=30s backup;/ }' /etc/nginx/sites-available/china-car-parts
          else
            # Make 8002 primary, 8001 backup  
            sed -i '/upstream china_car_parts_api/,/}/ { s/server 127.0.0.1:8001.*/server 127.0.0.1:8001 weight=1 max_fails=3 fail_timeout=30s backup;/; s/server 127.0.0.1:8002.*/server 127.0.0.1:8002 weight=1 max_fails=3 fail_timeout=30s;/ }' /etc/nginx/sites-available/china-car-parts
          fi
          
          # Test config and reload
          nginx -t && nginx -s reload
          
          # Final comprehensive health check
          echo "🏥 Running final health checks..."
          sleep 5
          
          # Check API health
          if ! curl -f -s http://localhost:$TARGET_PORT/api/v1/health > /dev/null; then
            echo "❌ Final API health check failed"
            echo "🔄 Attempting rollback..."
            # Rollback Nginx config
            cp /etc/nginx/sites-available/china-car-parts.backup /etc/nginx/sites-available/china-car-parts
            nginx -t && nginx -s reload
            echo "❌ Deployment failed and rolled back"
            exit 1
          fi
          
          # Check frontend accessibility
          if ! curl -f -s http://localhost/ > /dev/null; then
            echo "⚠️ Frontend accessibility check failed, but API is working"
          fi
          
          if ! curl -f -s http://localhost/panel/ > /dev/null; then
            echo "⚠️ Admin panel accessibility check failed, but API is working"
          fi
          
          echo "✅ Production deployment to $TARGET completed successfully!"
          echo "🌐 Customer Portal: http://$(hostname -I | awk '{print $1}')/"
          echo "🎛️ Admin Panel: http://$(hostname -I | awk '{print $1}')/panel/"
          echo "🔗 API Health: http://$(hostname -I | awk '{print $1}')/api/v1/health"
          EOF
          
          # Copy and execute script using password authentication
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" scp deploy-blue-green.sh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }}:/tmp/
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }} "chmod +x /tmp/deploy-blue-green.sh && /tmp/deploy-blue-green.sh"

      - name: Production Health Check
        run: |
          # Run comprehensive health check on the production server
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }} "
            echo '🏥 Running comprehensive production health checks...'
            
            # Test API health (both ports)
            echo '🔍 Testing API health...'
            if curl -f -s http://localhost:8001/api/v1/health > /dev/null; then
              echo '✅ API on port 8001 is healthy'
              ACTIVE_PORT=8001
            elif curl -f -s http://localhost:8002/api/v1/health > /dev/null; then
              echo '✅ API on port 8002 is healthy'
              ACTIVE_PORT=8002
            else
              echo '❌ API health check failed on both ports'
              exit 1
            fi
            
            # Test Customer Portal
            echo '🌐 Testing Customer Portal...'
            if curl -f -s http://localhost/ > /dev/null; then
              echo '✅ Customer Portal is accessible'
            else
              echo '❌ Customer Portal is not accessible'
              exit 1
            fi
            
            # Test Admin Panel
            echo '🎛️ Testing Admin Panel...'
            echo '🔍 Checking Admin Panel files...'
            ls -la /opt/china-car-parts/app/frontend/panel/dist/ || echo '❌ Admin Panel files not found'
            echo '🔍 Testing Admin Panel URL...'
            curl -v http://localhost/panel/ || echo '❌ Admin Panel curl failed'
            if curl -f -s http://localhost/panel/ > /dev/null; then
              echo '✅ Admin Panel is accessible'
            else
              echo '❌ Admin Panel is not accessible'
              exit 1
            fi
            
            # Test Nginx configuration
            echo '🌐 Testing Nginx configuration...'
            if nginx -t > /dev/null 2>&1; then
              echo '✅ Nginx configuration is valid'
            else
              echo '❌ Nginx configuration is invalid'
              exit 1
            fi
            
            # Test service status
            echo '🔄 Checking service status...'
            if systemctl is-active --quiet china-car-parts-api-blue; then
              echo '✅ Blue API service is running'
            fi
            if systemctl is-active --quiet china-car-parts-api-green; then
              echo '✅ Green API service is running'
            fi
            if systemctl is-active --quiet nginx; then
              echo '✅ Nginx service is running'
            fi
            
            echo '✅ All production health checks passed!'
            echo '🌐 Customer Portal: http://$(hostname -I | awk "{print \$1}")/'
            echo '🎛️ Admin Panel: http://$(hostname -I | awk "{print \$1}")/panel/'
            echo '🔗 API Health: http://$(hostname -I | awk "{print \$1}")/api/v1/health'
          "

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commitSha = context.sha;
            const prodUrl = '${{ secrets.PROD_API_URL || 'https://5.223.59.155/api' }}';
            const frontendUrl = '${{ secrets.PROD_FRONTEND_ORIGIN || 'https://5.223.59.155' }}';
            
            console.log(`🚀 Production Deployment Successful!
            
            **Commit:** \`${commitSha}\`
            **API:** ${prodUrl}
            **Frontend:** ${frontendUrl}
            
            Deployment completed at ${new Date().toISOString()}`);

  # ============================================================================
  # EMERGENCY ROLLBACK
  # ============================================================================
  rollback-production:
    name: 🚨 Emergency Rollback Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH client and sshpass
        run: |
          # Disable man-db triggers to speed up installation
          echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_HOST || '5.223.59.155' }} >> ~/.ssh/known_hosts

      - name: Execute Emergency Rollback
        run: |
          # Create rollback script
          cat > rollback-production.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚨 Starting emergency rollback..."
          
          # Determine current active environment
          CURRENT_PORT=$(nginx -T 2>/dev/null | grep -A 5 'upstream china_car_parts_api' | grep -v backup | grep -o '800[12]' | head -1)
          if [ "$CURRENT_PORT" = "8001" ]; then
            CURRENT_ENV="blue"
            ROLLBACK_ENV="green"
            ROLLBACK_PORT="8002"
          else
            CURRENT_ENV="green"
            ROLLBACK_ENV="blue"
            ROLLBACK_PORT="8001"
          fi
          
          echo "🔄 Rolling back from $CURRENT_ENV to $ROLLBACK_ENV..."
          
          # Check if rollback environment is healthy
          if curl -f -s http://localhost:$ROLLBACK_PORT/api/v1/health > /dev/null; then
            echo "✅ Rollback environment is healthy"
          else
            echo "❌ Rollback environment is not healthy, cannot rollback"
            exit 1
          fi
          
          # Switch traffic back
          cp /etc/nginx/sites-available/china-car-parts.backup /etc/nginx/sites-available/china-car-parts
          nginx -t && nginx -s reload
          
          echo "✅ Emergency rollback completed successfully!"
          EOF
          
          # Execute rollback
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" scp rollback-production.sh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }}:/tmp/
          sshpass -p "${{ secrets.PROD_SSH_PASSWORD }}" ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST || '5.223.59.155' }} "chmod +x /tmp/rollback-production.sh && /tmp/rollback-production.sh"

  # ============================================================================
  # CLEANUP & NOTIFICATIONS
  # ============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Generate Deployment Report
        run: |
          echo "## 🚀 Deployment Report" >> deployment-report.md
          echo "- **Commit:** ${{ github.sha }}" >> deployment-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Workflow:** ${{ github.workflow }}" >> deployment-report.md
          echo "- **Status:** ${{ job.status }}" >> deployment-report.md
          echo "- **Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-report.md

      - name: Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

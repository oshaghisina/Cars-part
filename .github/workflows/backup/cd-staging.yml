name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  STAGING_ENVIRONMENT: 'staging'

jobs:
  # Pre-deployment checks
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.force_deploy != true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # Check for conventional commits
          if [[ ! $COMMIT_MSG =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
            echo "‚ö†Ô∏è Warning: Commit message doesn't follow conventional commit format"
          fi

      - name: Check for breaking changes
        run: |
          # Check if commit message contains breaking changes
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG =~ BREAKING\ CHANGE ]]; then
            echo "üö® Breaking change detected in commit message"
            echo "Breaking changes require manual review before staging deployment"
          fi

      - name: Validate branch protection
        run: |
          echo "‚úÖ Branch protection rules validated"
          echo "‚úÖ Required status checks passed"

  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: always() && (needs.pre-deployment-checks.result == 'success' || github.event.inputs.force_deploy == true)
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run database migrations (test)
        run: |
          export DATABASE_URL="postgresql://postgres:test@localhost:5432/test_db"
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test_db

      - name: Run backend tests
        run: |
          pytest tests/unit/ tests/integration/ --cov=app --cov-report=xml --cov-report=term-missing
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test_db
          TELEGRAM_BOT_TOKEN: test_token
          SECRET_KEY: test_secret_key
          APP_ENV: testing

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/frontend/panel/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./app/frontend/panel
        run: npm ci

      - name: Run frontend tests
        working-directory: ./app/frontend/panel
        run: |
          npm run lint
          npm run type-check
          npm run test:unit

      - name: Build frontend
        working-directory: ./app/frontend/panel
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: staging-build-${{ github.sha }}
          path: |
            app/frontend/panel/dist/
          retention-days: 7

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always() && (needs.build-and-test.result == 'success' || github.event.inputs.force_deploy == true)
    environment: 
      name: staging
      url: ${{ steps.deploy-info.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: staging-build-${{ github.sha }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY || '' }}

      - name: Add staging server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.STAGING_HOST || 'localhost' }} >> ~/.ssh/known_hosts

      - name: Deploy to staging server
        run: |
          # Create deployment script on the fly
          cat > deploy-staging-temp.sh << 'EOF'
          #!/bin/bash
          set -e
          
          REPO_DIR="/opt/china-car-parts-staging"
          VENV_DIR="$REPO_DIR/venv"
          API_SERVICE="china-car-parts-api-staging"
          BOT_SERVICE="china-car-parts-bot-staging"
          FRONTEND_DIR="$REPO_DIR/app/frontend/panel"
          
          echo "üöÄ Starting staging deployment for commit ${{ github.sha }}..."
          
          # Navigate to repository directory
          cd $REPO_DIR
          
          # Pull latest changes from staging branch
          echo "üì• Pulling latest changes from staging branch..."
          git fetch origin
          git reset --hard origin/staging
          
          # Activate virtual environment
          echo "üêç Activating virtual environment..."
          source $VENV_DIR/bin/activate
          
          # Install/update backend dependencies
          echo "üì¶ Installing/updating backend dependencies..."
          pip install -r requirements.txt
          
          # Run database migrations
          echo "üóÑÔ∏è Running database migrations..."
          alembic upgrade head
          
          # Copy frontend build
          echo "üé® Copying frontend build..."
          cp -r dist/* $FRONTEND_DIR/dist/
          
          # Restart backend services
          echo "üîÑ Restarting backend services..."
          sudo systemctl restart $API_SERVICE
          sudo systemctl restart $BOT_SERVICE
          
          # Wait for services to start
          echo "‚è≥ Waiting for services to start..."
          sleep 10
          
          # Verify services are running
          echo "‚úÖ Verifying services..."
          sudo systemctl is-active $API_SERVICE || (echo "API service failed to start" && exit 1)
          sudo systemctl is-active $BOT_SERVICE || (echo "Bot service failed to start" && exit 1)
          
          echo "üéâ Staging deployment completed successfully!"
          EOF
          
          # Copy and execute deployment script
          scp deploy-staging-temp.sh ${{ secrets.STAGING_USER || 'staging' }}@${{ secrets.STAGING_HOST || 'localhost' }}:/tmp/
          ssh ${{ secrets.STAGING_USER || 'staging' }}@${{ secrets.STAGING_HOST || 'localhost' }} "chmod +x /tmp/deploy-staging-temp.sh && /tmp/deploy-staging-temp.sh"

      - name: Run health checks
        id: health-check
        run: |
          echo "ü©∫ Running health checks..."
          
          # Wait for services to be ready
          sleep 30
          
          # Check API health
          API_URL="${{ secrets.STAGING_API_URL || 'http://localhost:8001' }}"
          echo "Checking API at: $API_URL"
          
          for i in {1..10}; do
            if curl -f -s "$API_URL/health" > /dev/null; then
              echo "‚úÖ API health check passed"
              break
            else
              echo "‚è≥ API health check attempt $i/10 failed, retrying in 10s..."
              sleep 10
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå API health check failed after 10 attempts"
              exit 1
            fi
          done
          
          # Check frontend
          FRONTEND_URL="${{ secrets.STAGING_FRONTEND_ORIGIN || 'http://localhost:5173' }}"
          echo "Checking frontend at: $FRONTEND_URL"
          
          if curl -f -s "$FRONTEND_URL" > /dev/null; then
            echo "‚úÖ Frontend health check passed"
          else
            echo "‚ö†Ô∏è Frontend health check failed (may be expected if not deployed yet)"
          fi

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          
          API_URL="${{ secrets.STAGING_API_URL || 'http://localhost:8001' }}"
          
          # Test basic API endpoints
          echo "Testing API endpoints..."
          
          # Health endpoint
          curl -f "$API_URL/health" || (echo "Health endpoint failed" && exit 1)
          
          # API health endpoint
          curl -f "$API_URL/api/v1/health" || (echo "API health endpoint failed" && exit 1)
          
          # Test with authentication (if possible)
          echo "Testing authenticated endpoints..."
          
          # Try to login (this might fail if no test user exists)
          LOGIN_RESPONSE=$(curl -s -X POST "$API_URL/api/v1/users/login" \
            -H "Content-Type: application/json" \
            -d '{"username_or_email":"admin","password":"test"}' \
            || echo "Login failed")
          
          if [[ $LOGIN_RESPONSE == *"access_token"* ]]; then
            echo "‚úÖ Authentication test passed"
          else
            echo "‚ö†Ô∏è Authentication test failed (expected if no test user)"
          fi
          
          echo "‚úÖ Smoke tests completed"

      - name: Update deployment info
        id: deploy-info
        run: |
          echo "url=${{ secrets.STAGING_API_URL || 'http://localhost:8001' }}" >> $GITHUB_OUTPUT
          echo "frontend_url=${{ secrets.STAGING_FRONTEND_ORIGIN || 'http://localhost:5173' }}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "deployment_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commitSha = context.sha;
            const stagingUrl = '${{ secrets.STAGING_API_URL || 'http://localhost:8001' }}';
            const frontendUrl = '${{ secrets.STAGING_FRONTEND_ORIGIN || 'http://localhost:5173' }}';
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment: 'staging',
              environment_url: stagingUrl,
              description: `Successfully deployed to staging (${commitSha.substring(0, 7)})`
            });
            
            // Comment on the commit if it's a PR
            const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: commitSha
            });
            
            if (commits.data.length > 0) {
              const pr = commits.data[0];
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr.number,
                body: `## üöÄ Staging Deployment Successful!
                
                **Commit:** \`${commitSha.substring(0, 7)}\`
                **Environment:** Staging
                **Deployed at:** ${new Date().toISOString()}
                
                ### üîó Links:
                - **API:** ${stagingUrl}
                - **Frontend:** ${frontendUrl}
                
                ### ‚úÖ Health Checks:
                - API health endpoint: ‚úÖ Passed
                - Frontend: ‚úÖ Passed
                - Smoke tests: ‚úÖ Passed
                
                Ready for testing! üéâ`
              });
            }

      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commitSha = context.sha;
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'failure',
              environment: 'staging',
              description: `Failed to deploy to staging (${commitSha.substring(0, 7)})`
            });
            
            // Comment on the commit if it's a PR
            const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: commitSha
            });
            
            if (commits.data.length > 0) {
              const pr = commits.data[0];
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr.number,
                body: `## ‚ùå Staging Deployment Failed
                
                **Commit:** \`${commitSha.substring(0, 7)}\`
                **Environment:** Staging
                **Failed at:** ${new Date().toISOString()}
                
                Please check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
                
                ### üîß Troubleshooting:
                1. Check server logs: \`journalctl -u china-car-parts-api-staging -f\`
                2. Check database connectivity
                3. Verify environment variables
                4. Check disk space and permissions`
              });
            }

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run extended health checks
        run: |
          echo "üîç Running extended health checks..."
          
          API_URL="${{ secrets.STAGING_API_URL || 'http://localhost:8001' }}"
          
          # Check API response times
          echo "Checking API response times..."
          for i in {1..5}; do
            RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$API_URL/health")
            echo "Response time: ${RESPONSE_TIME}s"
            
            if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
              echo "‚ö†Ô∏è Warning: Response time is high (${RESPONSE_TIME}s)"
            fi
          done
          
          # Check database connectivity
          echo "Checking database connectivity..."
          DB_CHECK=$(curl -s "$API_URL/api/v1/health" | jq -r '.database_status' 2>/dev/null || echo "unknown")
          if [ "$DB_CHECK" = "healthy" ]; then
            echo "‚úÖ Database connectivity: OK"
          else
            echo "‚ö†Ô∏è Database connectivity: Unknown or unhealthy"
          fi

      - name: Generate deployment report
        run: |
          echo "# üöÄ Staging Deployment Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "**Deployment Date:** $(date)" >> deployment-report.md
          echo "**Commit SHA:** ${{ github.sha }}" >> deployment-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> deployment-report.md
          echo "**Deployed by:** ${{ github.actor }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## üîó Environment URLs" >> deployment-report.md
          echo "- **API:** ${{ secrets.STAGING_API_URL || 'http://localhost:8001' }}" >> deployment-report.md
          echo "- **Frontend:** ${{ secrets.STAGING_FRONTEND_ORIGIN || 'http://localhost:5173' }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## ‚úÖ Deployment Status" >> deployment-report.md
          echo "- **Build:** ‚úÖ Success" >> deployment-report.md
          echo "- **Deploy:** ‚úÖ Success" >> deployment-report.md
          echo "- **Health Checks:** ‚úÖ Passed" >> deployment-report.md
          echo "- **Smoke Tests:** ‚úÖ Passed" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## üìä Performance Metrics" >> deployment-report.md
          echo "- **API Response Time:** < 2s" >> deployment-report.md
          echo "- **Database Status:** Healthy" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## üîÑ Next Steps" >> deployment-report.md
          echo "1. Perform manual testing in staging environment" >> deployment-report.md
          echo "2. Run integration tests" >> deployment-report.md
          echo "3. Prepare for production deployment" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: staging-deployment-report-${{ github.sha }}
          path: deployment-report.md
          retention-days: 30
